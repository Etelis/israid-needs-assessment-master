name: deploy to lambda
on: [push]
jobs:
  get-folders:
    name: Get the lambda folders
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.folder-fetcher.outputs.folders }}
    steps:
      - uses: actions/checkout@v1
      - name: get all folders
        id: folder-fetcher
        run: |
          var1=$(find lambdas -mindepth 2 -maxdepth 2 -type d | jq -R -s -c 'split("\n")[:-1]')
          echo "folders=$var1" >> "$GITHUB_OUTPUT"
  deploy_source:
    name: build and deploy lambda
    needs: get-folders
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x]
        manifest: ${{ fromJson(needs.get-folders.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: get properties
        id: json_properties
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "${{matrix.manifest}}/config.json"

      - name: Install AWS CLI
        run: |
          sudo apt-get install -y unzip
          curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
        shell: bash
        if: ${{ 1 == 2}}

      - name: Set up AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'Node') }}
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/setup-python@v4
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'python') }}
        with:
          python-version: "3.11"

      - name: npm install and build
        run: |
          cd ${{matrix.manifest}}
          npm install
          npm run build --if-present
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'Node') }}
        env:
          CI: true

      - name: python install and build
        run: |
          cd ${{matrix.manifest}}
          python -m pip install --target ./package -r ./requirements.txt --no-user
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'python') }}

      - uses: vimtor/action-zip@v1
        with:
          files: ${{matrix.manifest}}/
          recursive: true
          dest: bundle.zip

      - name: Loop through directories and create or update Lambdas
        run: |
          function_name=$(basename ${{ matrix.manifest }})

          # Check if the function exists
          if aws lambda get-function --function-name $function_name &> /dev/null; then
            aws lambda update-function-code \
              --function-name $function_name \
              --zip-file fileb://bundle.zip \
            /
          else
            aws lambda create-function \
              --function-name $function_name \
              --runtime $runtime \
              --handler $handler \
              --zip-file fileb://bundle.zip \
            /
        env:
          dir: ${{ matrix.manifest }}
          handler: ${{steps.json_properties.outputs.handler}}
          runtime: ${{steps.json_properties.outputs.runtime}}