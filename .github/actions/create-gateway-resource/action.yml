name: 'API Gateway resource creator'
description: 'API Gateway resource creator'
inputs:
  API_NAME:
    description: 'API_NAME'
    required: true
  PATH:
    description: 'PATH'
    required: true
  LAMBDA:
    description: 'LAMBDA'
    required: true
  METHOD:
    description: 'METHOD'
    required: true
runs:
  using: "composite"
  steps:
      - name: Check if API Gateway named ${{ inputs.API_NAME }} exists
        id: get-api-id
        run: |
          id=$(aws apigateway get-rest-apis \
            --query "items[?name=='${{ inputs.API_NAME }}'].id" \
            --output text)

          if [ -z $id ]; then
            aws apigateway create-rest-api \
              --name "${{ inputs.API_NAME }}" \
              --description "API Gateway for ${{ inputs.API_NAME }}"
          fi 
          id=$(aws apigateway get-rest-apis \
            --query "items[?name=='${{ inputs.API_NAME }}'].id" \
            --output text)
          echo "id=$id" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if Resource named ${{ inputs.PATH }} exists
        id: get-resource-id
        run: |
          # Split the URL route into an array of path segments
          IFS='/' read -ra PATH_SEGMENTS <<< "/ad/matay"

          # Create API Gateway resources based on the path segments
          PARENT_ID="null"
          RESOURCE_EXISTS=""
          CURRENT_FULL_PATH=""

          for SEGMENT in "${PATH_SEGMENTS[@]}"; do
            if [ "$CURRENT_FULL_PATH" != "/" ]; then
              CURRENT_FULL_PATH=$CURRENT_FULL_PATH"/"$SEGMENT
            else
              CURRENT_FULL_PATH="/"$SEGMENT
            fi
            echo $CURRENT_FULL_PATH
            echo $PARENT_ID
            # Check if the resource already exists
            RESOURCE_EXISTS=$(aws apigateway get-resources \
              --rest-api-id ${{ steps.get-api-id.outputs.id }} \
              --query "items[?path=='$CURRENT_FULL_PATH'].id" \
              --output text)

            if [ -z "$RESOURCE_EXISTS" ]; then
              # Create the resource
              RESOURCE_ID=$(aws apigateway create-resource \
                --rest-api-id ${{ steps.get-api-id.outputs.id }} \
                --parent-id "$PARENT_ID" \
                --path-part "$SEGMENT" \
                --query 'id' \
                --output text)

              echo "Created resource '$CURRENT_FULL_PATH' with ID: $RESOURCE_ID"
              PARENT_ID="$RESOURCE_ID"
            else
              echo "Resource '$CURRENT_FULL_PATH' already exists with ID: $RESOURCE_EXISTS"
              PARENT_ID="$RESOURCE_EXISTS"
            fi
          done

          echo "id=$RESOURCE_EXISTS" >> "$GITHUB_OUTPUT"
          echo "API Gateway resources creation completed."
        shell: bash

      - name: Check if Method exists
        run: |
          id=$(aws apigateway get-method \
            --rest-api-id ${{ steps.get-api-id.outputs.id }} \
            --resource-id ${{ steps.get-resource-id.outputs.id }} \
            --http-method "${{ inputs.METHOD }}")

          if [ -z $id ]; then
            aws apigateway put-method \
              --rest-api-id ${{ steps.get-api-id.outputs.id }} \
              --resource-id ${{ steps.get-resource-id.outputs.id }} \
              --http-method "${{ inputs.METHOD }}" \
              --authorization-type NONE
          fi 
        shell: bash

      - name: Attach Lambda to Method
        run: |
          lambda_arn=$(aws lambda list-functions \
            --query "Functions[?FunctionName=='${{ inputs.LAMBDA }}'].FunctionArn" \
            --output text)

          aws apigateway put-integration \
            --rest-api-id ${{ steps.get-api-id.outputs.id }} \
            --resource-id ${{ steps.get-resource-id.outputs.id }} \
            --http-method "${{ inputs.METHOD }}" \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/${lambda_arn}/invocations"
          echo "Lambda integrated successfully!"
        shell: bash