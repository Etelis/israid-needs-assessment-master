name: 'Python build'
description: 'Python build'
inputs:
  dir:
    description: 'Directory'
    required: true
  function_name:
    description: 'function_name'
    required: true
  runtime:
    description: 'runtime'
    required: true
runs:
  using: "composite"
  steps:
      - name: Extract python version
        id: python_version
        uses: ./.github/actions/replace
        with:
          body: ${{inputs.runtime}}
          string1: "python"
          string2: ""

      - name: Using python version ${{steps.python_version.outputs.value}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{steps.python_version.outputs.value}}

      - name: Create dependencies layer for python
        run: |
          LAYER_NAME=PYTHON-DEP-${function_name}

          mkdir -p $function_name-deps/python

          python -m pip install \
            --target ./$function_name-deps/python \
            -r $dir/requirements.txt \
            --no-user \
            --platform manylinux2014_x86_64 \
            --only-binary=:all: || {
              echo "Pip installation failed, falling back to Docker"
              # Run Docker commands only if pip fails
              docker run -v $(pwd):/app -w /app amazonlinux:2 \
                yum install -y python-pip && \
                python -m pip install \
                    --platform manylinux2014_x86_64 \
                    --only-binary=:all: \
                    --target ./$function_name-deps/python \
                    -r $dir/requirements.txt \
                    --no-user
          }

          # Create a zip file containing the layer content
          cd $function_name-deps
          zip -r layer.zip .

          # Publish the layer to AWS Lambda
          aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "Python dependencies for $dir" \
            --zip-file fileb://layer.zip
          
          # Get all versions of the Lambda layer
          LAYER_VERSIONS=$(aws lambda list-layer-versions \
            --layer-name $LAYER_NAME \
            --query 'LayerVersions[*].Version')

          # Sort versions in descending order
          SORTED_VERSIONS=($(echo $LAYER_VERSIONS | tr -d '[],' | tr ' ' '\n' | sort -nr))

          # Retain the latest 5 versions and delete the rest
          for version in "${SORTED_VERSIONS[@]:5}"; do
              echo "Deleting Lambda layer version: $version"
              aws lambda delete-layer-version \
                --layer-name $LAYER_NAME \
                --version-number $version
          done
        env:
          dir: ${{ inputs.dir }}
          function_name: ${{ inputs.function_name }}
        shell: bash