name: 'API Gateway resource creator'
description: 'API Gateway resource creator'
inputs:
  API_NAME:
    description: 'API_NAME'
    required: true
  PATH:
    description: 'PATH'
    required: true
  LAMBDA:
    description: 'LAMBDA'
    required: true
  METHOD:
    description: 'METHOD'
    required: true
runs:
  using: "composite"
  steps:
      - name: Check if API Gateway exists
        id: get-api-id
        run: |
          id=$(aws apigateway get-rest-apis \
            --query "items[?name=='${{ inputs.API_NAME }}'].id" \
            --output text)

          if [ "$id" != "" ]; then
            aws apigateway create-rest-api \
              --name "${{ inputs.API_NAME }}" \
              --description "API Gateway for ${{ inputs.API_NAME }}"
          fi 
          id=$(aws apigateway get-rest-apis \
            --query "items[?name=='${{ inputs.API_NAME }}'].id" \
            --output text)
          echo "id=$id" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if Resource exists
        id: get-resource-id
        run: |
          id=$(aws apigateway get-resources \
            --rest-api-id ${{ steps.get-api-id.outputs.id }}
            --query "items[?path=='${{ inputs.PATH }}'].id" \
            --output text)

          if [ "$id" != "" ]; then
            aws apigateway create-resource \
              --rest-api-id ${{ steps.get-api-id.outputs.id }} \
              --parent-id ${{ steps.get-api-id.outputs.id }} \
              --path-part "${{ inputs.PATH }}"
          fi

          id=$(aws apigateway get-resources \
            --rest-api-id ${{ steps.get-api-id.outputs.id }}
            --query "items[?path=='${{ inputs.PATH }}'].id" \
            --output text)
          echo "id=$id" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if Method exists
        run: |
          id=$(aws apigateway get-method \
            --rest-api-id ${{ steps.get-api-id.outputs.id }} \
            --resource-id ${{ steps.get-resource-id.outputs.id }} \
            --http-method "${{ inputs.METHOD }})
            
          if [ "$id" != "" ]; then
            aws apigateway put-method \
              --rest-api-id ${{ steps.get-api-id.outputs.id }} \
              --resource-id ${{ steps.get-resource-id.outputs.id }} \
              --http-method "${{ inputs.METHOD }}" \
              --authorization-type NONE
          fi 
        shell: bash

      - name: Attach Lambda to Method
        run: |
          lambda_arn=$(aws lambda list-functions \
            --query "Functions[?FunctionName=='${{ inputs.LAMBDA }}'].FunctionArn" \
            --output text)

          aws apigateway put-integration \
            --rest-api-id ${{ steps.get-api-id.outputs.id }} \
            --resource-id ${{ steps.get-resource-id.outputs.id }} \
            --http-method "${{ inputs.METHOD }}" \
            --type AWS_PROXY \
            --integration-http-method "${{ inputs.METHOD }}" \
            --uri "arn:aws:apigateway:${{ runner.os }}-east-1:lambda:path/2015-03-31/functions/${lambda_arn}/invocations"
          echo "Lambda integrated successfully!"
        shell: bash