name: deploy to lambda
on: [push]
jobs:
  get-layers-folders:
    name: Get the layers folders
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.folder-fetcher.outputs.folders }}
    steps:
      - uses: actions/checkout@v1
      - name: get all folders
        id: folder-fetcher
        run: |
          var1=$(find layers -mindepth 1 -maxdepth 1 -type d | jq -R -s -c 'split("\n")[:-1]')
          echo "folders=$var1" >> "$GITHUB_OUTPUT"
  
  deploy_layers:
    name: build and deploy layers
    needs: get-layers-folders
    strategy:
      fail-fast: false
      matrix:
        manifest: ${{ fromJson(needs.get-layers-folders.outputs.folders) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Create layer
        run: |
          layer_name=$(basename $dir)
          cd layers/$layer_name

          npm install
          npm run build --if-present

          cd ..

          # Create a zip file containing the layer content
          zip -r layer.zip $layer_name

          # Publish the layer to AWS Lambda
          aws lambda publish-layer-version \
            --layer-name $layer_name \
            --description "Github layer for $dir" \
            --zip-file fileb://layer.zip
        env:
          dir: ${{ matrix.manifest }}

      - name: Cleanup old versions of layer
        run: |
          LAYER_NAME=$(basename $dir)
          # Get all versions of the Lambda layer
          LAYER_VERSIONS=$(aws lambda list-layer-versions \
            --layer-name $LAYER_NAME \
            --query 'LayerVersions[*].Version')

          # Sort versions in descending order
          SORTED_VERSIONS=($(echo $LAYER_VERSIONS | tr -d '[],' | tr ' ' '\n' | sort -nr))

          # Retain the latest 5 versions and delete the rest
          for version in "${SORTED_VERSIONS[@]:5}"; do
              echo "Deleting Lambda layer version: $version"
              aws lambda delete-layer-version \
                --layer-name $LAYER_NAME \
                --version-number $version
          done
        env:
          dir: ${{ matrix.manifest }}
  
  get-lambda-folders:
    name: Get the lambda folders
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.folder-fetcher.outputs.folders }}
    steps:
      - uses: actions/checkout@v1
      - name: get all folders
        id: folder-fetcher
        run: |
          var1=$(find lambdas -mindepth 2 -maxdepth 2 -type d | jq -R -s -c 'split("\n")[:-1]')
          echo "folders=$var1" >> "$GITHUB_OUTPUT"

  deploy_lambdas:
    name: build and deploy lambdas
    needs: [get-lambda-folders,deploy_layers]
    strategy:
      fail-fast: false
      matrix:
        manifest: ${{ fromJson(needs.get-lambda-folders.outputs.folders) }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: get properties
        id: json_properties
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "${{matrix.manifest}}/config.json"

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Build step for python based code
        uses: ./.github/actions/python-build
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'python') }}
        with:
          dir: ${{ matrix.manifest }}

      - name: Build step for node based code
        uses: ./.github/actions/node-build
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'Node') }}
        with:
          dir: ${{ matrix.manifest }}
 
      - name: Build step for docker based code
        uses: ./.github/actions/docker-build
        if: ${{ startsWith(steps.json_properties.outputs.runtime, 'Docker') }}
        with:
          dir: ${{ matrix.manifest }}
          ecr_id: 558964794123
          ecr_repo: "558964794123.dkr.ecr.eu-north-1.amazonaws.com"

      - uses: ./.github/actions/zip-and-push
        with:
          dir: ${{ matrix.manifest }}
          handler: ${{steps.json_properties.outputs.handler}}
          runtime: ${{steps.json_properties.outputs.runtime}}
          memorysize: ${{steps.json_properties.outputs.memorysize}}
          timeout: ${{steps.json_properties.outputs.timeout}}
        if: ${{ !startsWith(steps.json_properties.outputs.runtime, 'Docker') }}

      - name: Dynamically attach layers
        run: |
          function_name=$(basename $dir)


          combined_layers=""

          # Read layer names and loop through each layer
          for LAYER_NAME in $(jq -r '.Layers[]' $dir/config.json); do
              # Get the ARN of the latest version of the Lambda layer
              LAYER_ARN=$(aws lambda list-layer-versions \
                --layer-name $LAYER_NAME \
                --query 'LayerVersions[0].LayerVersionArn' --output text)
              echo $LAYER_ARN
              combined_layers="$combined_layers $LAYER_ARN"
          done
          
          echo $function_name
          echo $combined_layers

          # Attach the layer to the Lambda function
          aws lambda update-function-configuration \
            --function-name $function_name \
            --layers $combined_layers
        env:
          dir: ${{ matrix.manifest }}
        shell: bash