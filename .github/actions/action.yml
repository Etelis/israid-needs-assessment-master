
name: 'Hello World'
description: 'Greet someone'
inputs:
  dir:
    description: 'Directory'
    required: true
  handler:
    description: 'Directory'
    required: true
  runtime:
    description: 'Directory'
    required: true
  memorysize:
    description: 'Directory'
    required: true
  timeout:
    description: 'Directory'
    required: true
runs:
  using: "composite"
  steps:
      - uses: vimtor/action-zip@v1
        with:
          files: ${{inputs.dir}}/
          recursive: true
          dest: bundle.zip

      - name: Dynamically create Lambdas
        run: |
          function_name=$(basename $dir)

          # Check if the function exists
          if aws lambda get-function --function-name $function_name &> /dev/null; then
            aws lambda update-function-code \
              --function-name $function_name \
              --zip-file fileb://bundle.zip

            sleep 5

            aws lambda update-function-configuration \
              --function-name $function_name \
              --handler $handler \
              --runtime $runtime \
              --memory-size $memorysize \
              --timeout $timeout
          else
            if aws iam get-role --role-name ${function_name}-role &> /dev/null; then
              role_arn=$(aws iam get-role --role-name ${function_name}-role --query 'Role.Arn' --output text)
            else
              # Create a new IAM role for the Lambda function
              role_arn=$(aws iam create-role --role-name ${function_name}-role --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{"Effect": "Allow","Principal": {"Service": "lambda.amazonaws.com"},"Action": "sts:AssumeRole"}]}' --query 'Role.Arn' --output text)
              
              # Attach basic Lambda execution policy to the new role
              aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole --role-name ${function_name}-role
              aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess --role-name ${function_name}-role

              # Role attachment takes time
              sleep 30
            fi
            
            # Create the new lambda
            aws lambda create-function \
              --function-name $function_name \
              --runtime $runtime \
              --handler $handler \
              --zip-file fileb://bundle.zip \
              --memory-size $memorysize \
              --timeout $timeout \
              --role $role_arn
          fi
        env:
          dir: ${{ inputs.dir }}
          handler: ${{inputs.handler}}
          runtime: ${{inputs.runtime}}
          memorysize: ${{inputs.memorysize}}
          timeout: ${{inputs.timeout}}

      - name: Dynamically attach layers
        run: |
          function_name=$(basename $dir)


          combined_layers=""

          # Read layer names and loop through each layer
          for LAYER_NAME in $(jq -r '.Layers[]' $dir/config.json); do
              # Get the ARN of the latest version of the Lambda layer
              LAYER_ARN=$(aws lambda list-layer-versions \
                --layer-name $LAYER_NAME \
                --query 'LayerVersions[0].LayerVersionArn' --output text)
              echo $LAYER_ARN
              combined_layers="$combined_layers $LAYER_ARN"
          done
          
          echo $function_name
          echo $combined_layers

          # Attach the layer to the Lambda function
          aws lambda update-function-configuration \
            --function-name $function_name \
            --layers $combined_layers
        env:
          dir: ${{ inputs.dir }}